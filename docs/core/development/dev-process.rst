Development process
===================

This page described the process that should be followed for contributing to Twisted.


If you're going to be doing development on Twisted itself,
or if you want to take advantage of bleeding-edge features (or bug fixes) that are not yet available in a numbered release,
you'll probably want to check out a tree from the Twisted Git repository.

The `trunk` is the main branch and is where all current development takes place.


Checkout and initial dev virtual environment
--------------------------------------------

Twisted uses Git to track code changes.
Git tutorials can be found elsewhere,
see in particular `Git and GitHub learning resources <https://help.github.com/articles/good-resources-for-learning-git-and-github/>`_ :

.. code-block:: console

    $ git clone https://github.com/twisted/twisted twisted
    $ python3 -m venv ./venv
    $ . venv/bin/activate
    $ pip install -e .[dev]
    $ pip install pre-commit

Please note that all subsequent commands in this document assume that your Twisted virtual environment is active.  (However, we will not assume you've put it in `./venv`; feel free to use whatever Python environment manager you are comfortable with.)

The output of ``git blame`` `will be better <https://github.com/psf/black#migrating-your-code-style-without-ruining-git-blame>`_ if you configure it to use our ignore file:

.. code-block:: console

    $ cd twisted
    $ git config blame.ignoreRevsFile .git-blame-ignore-revs


Running tests
-------------

The tests are handled by the `trial` testing framework.
It knows about deferred and any other good stuff provided by Twisted.
To run the full unit-test suite, do:

.. code-block:: console

    trial twisted

To run a single test file (like ``twisted/test/test_defer.py`` ), do one of:

.. code-block:: console

    trial twisted.test.test_defer
    # or
    trial twisted/test/test_defer.py

To run any tests that are related to a code file, like ``twisted/protocols/imap4.py`` , do:

.. code-block:: console

    trial --testmodule twisted/mail/imap4.py

This depends upon the ``.py`` file having an appropriate "test-case-name" tag that indicates which test cases provide coverage.
See the :doc:`Test Standards <policy/test-standard>` document for
details about using "test-case-name".
In this example, the ``twisted.mail.test.test_imap`` test will be run.

Some tests create temporary files in `./_trial_temp`, which you can inspect for debugging purposes, but this directory will be deleted on each subsequent test run, so if you're debugging some filesystem code you may want to move it aside first.

Building docs
-------------

Twisted's narrative documentation — i.e. the documentation sourced from `.rst` files in `./docs/` — is generated by `Sphinx <https://sphinx-doc.org/>`_.
Its API reference documentation — i.e. the documentation sourced from docstrings in `.py` files — is generated by `pydoctor <https://pydoctor.readthedocs.io/>`_.

To build the HTML form of the docs into the ``doc/`` directory, do the following.
This will trigger a full build including the API docs:

.. code-block:: console

    tox -e narrativedocs
    firefox docs/_build/index.html


Committing and pre-commit hooks
--------------------------------

When submitting a PR, create a GitHub issue first, and prefix the name of the for the PR branch with the associated GitHub issue number, so that we can easily cross-reference them.
For example, use `1234-some-brach-name` as the name of the branch working to fix issue `1234`.

To speed up acceptance of your PR, you may want to make sure it passes our pre-commit code style checks locally.
If you skip this step, you may find some reformatting commits generated by the service we use, `pre-commit <https://pre-commit.com/>`_ . We don't mind, so feel free to let the computer do the job instead, but it may extend the amount of time you're waiting for automated tests to run.

To set up `git` to run these checks automatically every time you commit code::

    pre-commit install
    pre-commit.


Review process
--------------

Any changed accepted into the main branch must pass the review process.

See :doc:`the dedicated review process page </core/development/review-process>` for more details.
